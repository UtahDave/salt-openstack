#############
# OpenStack #
#############

[composite:osapi_volume]
use = call:cinder.api:root_app_factory
/: apiversions
/v1: openstack_volume_api_v1
/v2: openstack_volume_api_v2

[composite:openstack_volume_api_v1]
use = call:cinder.api.middleware.auth:pipeline_factory
noauth = request_id faultwrap sizelimit noauth apiv1
keystone = request_id faultwrap sizelimit authtoken keystonecontext apiv1
keystone_nolimit = request_id faultwrap sizelimit authtoken keystonecontext apiv1

[composite:openstack_volume_api_v2]
use = call:cinder.api.middleware.auth:pipeline_factory
noauth = request_id faultwrap sizelimit noauth apiv2
keystone = request_id faultwrap sizelimit authtoken keystonecontext apiv2
keystone_nolimit = request_id faultwrap sizelimit authtoken keystonecontext apiv2

[filter:request_id]
paste.filter_factory = cinder.openstack.common.middleware.request_id:RequestIdMiddleware.factory

[filter:faultwrap]
paste.filter_factory = cinder.api.middleware.fault:FaultWrapper.factory

[filter:noauth]
paste.filter_factory = cinder.api.middleware.auth:NoAuthMiddleware.factory

[filter:sizelimit]
paste.filter_factory = cinder.api.middleware.sizelimit:RequestBodySizeLimiter.factory

[app:apiv1]
paste.app_factory = cinder.api.v1.router:APIRouter.factory

[app:apiv2]
paste.app_factory = cinder.api.v2.router:APIRouter.factory

[pipeline:apiversions]
pipeline = faultwrap osvolumeversionapp

[app:osvolumeversionapp]
paste.app_factory = cinder.api.versions:Versions.factory

##########
# Shared #
##########

[filter:keystonecontext]
paste.filter_factory = cinder.api.middleware.auth:CinderKeystoneContext.factory

[filter:authtoken]
#paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
paste.filter_factory = {{ salt['pillar.get']('cinder:keystone_authtoken:paste.filter_factory', 'keystoneclient.middleware.auth_token:filter_factory') }}

# the name of the admin tenant (string value)
#admin_tenant_name=%SERVICE_TENANT_NAME%
admin_tenant_name = {{ salt['pillar.get']('cinder:keystone_authtoken:admin_tenant_name', 'service') }}

# the keystone admin username (string value)
#admin_user=%SERVICE_USER%
admin_user = {{ salt['pillar.get']('cinder:keystone_authtoken:admin_user', 'cinder') }}

# the keystone admin password (string value)
#admin_password=%SERVICE_PASSWORD%
admin_password = {{ salt['pillar.get']('cinder:keystone_authtoken:admin_password', '<PILLAR_NOT_SET>') }}

# the keystone host (string value)
#auth_host=127.0.0.1
auth_host = {{ salt['pillar.get']('cinder:keystone_authtoken:auth_host', '127.0.0.1') }}

# the keystone port (integer value)
#auth_port=35357
auth_port = {{ salt['pillar.get']('cinder:keystone_authtoken:auth_port', '35357') }}

# protocol to be used for auth requests http/https (string value)
#auth_protocol=http
auth_protocol = {{ salt['pillar.get']('cinder:keystone_authtoken:auth_protocol', 'http') }}


#auth_uri=http://127.0.0.1:5000/
auth_uri = {{ salt['pillar.get']('cinder:keystone_authtoken:auth_uri', 'http://127.0.0.1:5000/') }}

# signing_dir is configurable, but the default behavior of the authtoken
# middleware should be sufficient.  It will create a temporary directory
# in the home directory for the user the cinder process is running as.
#signing_dir = /var/lib/cinder/keystone-signing
# TODO(raul): add these ones.
#service_port=5000
#service_host=192.168.122.102
#service_protocol=http
